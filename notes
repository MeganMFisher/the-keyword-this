// THIS  - what is going to be our context object. 

Context: the information around how a function was invoked. Where did I come from?
   obj.x() | x() | x.call({}) | func(fn) { fun() } | func(x)

What is the purpose of the 'this keyword'?
    the value of this is determined by how a function is called. You can use it when there are multiple objects in the same function

What are the four rules that govern what the 'this keyword' is bound to and describe each?

        Implicit
        Explicit
        default
        new 
        
    Javascript checks for explicit, new, implicit, then default(window) in that order.
    Generally implicit is used. Don't use default(window)

    *IMPLICIT: We look what is left of the dot at invokation. 
    IMPLIED CONTEXT: Context is inferred to be the object left of the dot when the function is invoked, not when it is defined. 

    What three things do you need for implicit to work?
        1. invokation  2. this keyword inside the function 3. something left of the dot

    
    OBJECT.ASSIGN = Object.assign({}, dog) //copy right onto left or copy dog onto new object. 

    *EXPLICIT: Usually only used because you broke the function. There was no left of the dot and its complicated or you couldn't use left of the dot so it still can work using .call, .apply. Explicit always wins. if there is an implict option it will be overwritten by the explicit option. 
        call/bind/apply

        .bind //  example.bind(example) bound together in a new copy that can't come apart. 

        .call // example.call({thisArr: [num, num2, num3]}, 3, 5) arguments start at position one instead of position 0. Off by one because our var first parameter is context what we want the this to be. 

        .apply // example.apply({thisArr: [num, num2, num3]}, [3, 5])

        .call vs .apply when there are no parameters there is no difference.  

    *DEFAULT 
        window

    *NEW 

    Constructor Function = completely break without 'new' keyword. Anytime a function starts with a capital letter it should have the 'new' keyword and is a constructor function. It is a convention that is not enforced but is an industry standard convention.


